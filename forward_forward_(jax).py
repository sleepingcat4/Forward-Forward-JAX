# -*- coding: utf-8 -*-
"""Forward-Forward (JAX).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mFGUCW1V0fStf4S29OTo2ffoUGmsCoEm

Importing the libraries
"""

import jax.numpy as np
import numpy as jp
from jax import grad, jit, vmap
from jax.example_libraries import stax
import tensorflow_datasets as tfds
import tensorflow as tf
from jax import random

"""Configurations"""

epochs= 4
batch_size = 100
learning_rate=0.0001
momentum=0.5
log_interval=10
random_seed=1

"""loading mnist dataset"""

mnist = tf.keras.datasets.mnist

(x_train, y_train), (x_test, y_test) = mnist.load_data()
x_train, x_test = x_train / 255.0, x_test / 255.0

x_train, x_test = x_train / 255.0, x_test / 255.0

"""Add a channels dimention"""

x_train = x_train[..., np.newaxis].astype("float32")
x_test = x_test[..., np.newaxis].astype("float32")

"""Slice and load the dataset"""

train_ds = tf.data.Dataset.from_tensor_slices((x_train, y_train)).shuffle(10000).batch(32)

"""Creating the model and forward-forward Algorithm"""

def FF(params, x):
  flatten = np.reshape(x.numpy(), (x.shape[0], -1))
  d1 = stax.relu(np.dot(params[0], flatten.T))
  d2 = stax.softmax(np.dot(params[1], d1))
  return d2

"""Initialise the model"""

params = [random.normal(random.PRNGKey(0), (128, 784)), 
          random.normal(random.PRNGKey(1), (10, 128))]

"""One forward pass"""

example = iter(train_ds)
example_data, example_targets = next(example)
FF(params, example_data)

"""print the model"""

print(FF)